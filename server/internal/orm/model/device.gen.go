// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"encoding/json"

	"gorm.io/plugin/soft_delete"
)

const TableNameDevice = "device"

// Device mapped from table <device>
type Device struct {
	ID         int32                 `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`
	NodeID     string                `gorm:"column:node_id;not null;comment:设备标识id" json:"node_id"`                      // 设备标识id
	Mac        string                `gorm:"column:mac;not null;comment:设备mac地址" json:"mac"`                             // 设备mac地址
	ProductID  int32                 `gorm:"column:product_id;not null;comment:产品id" json:"product_id"`                  // 产品id
	UserID     int32                 `gorm:"column:user_id;not null;comment:所属用户" json:"user_id"`                        // 所属用户
	Secret     string                `gorm:"column:secret;not null;comment:密钥" json:"secret"`                            // 密钥
	OnlineTime int32                 `gorm:"column:online_time;not null;comment:最后上线时间" json:"online_time"`              // 最后上线时间
	CreateTime uint                  `gorm:"column:create_time;not null;autoCreateTime;comment:创建时间" json:"create_time"` // 创建时间
	UpdateTime uint                  `gorm:"column:update_time;not null;autoUpdateTime;comment:更新时间" json:"update_time"` // 更新时间
	DeleteTime soft_delete.DeletedAt `gorm:"column:delete_time;not null;comment:删除时间 0表示未删除" json:"delete_time"`         // 删除时间 0表示未删除
}

// MarshalBinary 支持json序列化
func (m *Device) MarshalBinary() (data []byte, err error) {
	return json.Marshal(m)
}

// UnmarshalBinary 支持json反序列化
func (m *Device) UnmarshalBinary(data []byte) error {
	return json.Unmarshal(data, m)
}

// TableName Device's table name
func (*Device) TableName() string {
	return TableNameDevice
}
